---
- hosts: localhost
  vars_files:
    - vars.yml
  tasks:
    - name: additional repos
      block:
        - name: Enable the RPM Fusion repository
          dnf:
            name: "{{ item }}"
            state: present
          loop:
            - "https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ansible_distribution_major_version}}.noarch.rpm"
            - "https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ansible_distribution_major_version}}.noarch.rpm"

        - name: import gpg key for vscode repo
          command: rpm --import https://packages.microsoft.com/keys/microsoft.asc
          args:
            creates: /usr/share/distribution-gpg-keys/microsoft/microsoft.gpg

        - name: setup vscode repo
          copy:
            dest: /etc/yum.repos.d/vscode.repo
            content: "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc"
            owner: root
            group: root
            mode: 0644
      tags:
        - repos

    - name: packages
      block:
        - name: install required packages
          dnf:
            name: "{{ packages }}"
            state: present
          when: packages is defined

        - name: remove packages
          dnf:
            name: "{{ absent_packages }}"
            state: absent
          when: absent_packages is defined
      tags:
        - packages

    - name: locale, time ...
      block:
        - name: setup time
          file:
            state: link
            force: yes
            src: "/usr/share/zoneinfo/{{ timezone }}"
            dest: /etc/localtime
            owner: root
            group: root
            mode: 0644

        - name: setup locale.conf
          template:
            src: locale.conf.j2
            dest: /etc/locale.conf
            owner: root
            group: root
            mode: 0644
      tags:
        - locale

    - name: networking
      block:
        - name: setup hostname
          hostname:
            name: "{{ hostname }}"
            use: systemd
          notify: restart nm

        - name: create /etc/systemd/system-preset directory
          file:
            path: /etc/systemd/system-preset
            state: directory
            owner: root
            group: root
            mode: 0755

        - name: opt out of systemd-resolved use
          copy:
            dest: /etc/systemd/system-preset/20-systemd-resolved-disable.preset
            content: "disable systemd-resolved.service"
            owner: root
            group: root
            mode: 0644
          notify: daemon-reload

        - name: setup hosts, resolv.conf and NetworkManager
          template:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
            owner: root
            group: root
            mode: 0644
          notify: restart nm
          loop:
            - { src: hosts.j2, dest: /etc/hosts }
            - { src: resolv.conf.j2, dest: /etc/resolv.conf }
            - { src: NetworkManager.conf.j2, dest: /etc/NetworkManager/NetworkManager.conf }
      tags:
        - network

    - name: fonts
      block:
        - name: setup fontconfig
          template:
            src: fontconfig.j2
            dest: /etc/fonts/local.conf
            owner: root
            group: root
            mode: 0644
          notify: run fc-cache

        - name: setup fontconfig symlinks
          file:
            state: link
            force: yes
            src: "/usr/share/fontconfig/conf.avail/{{ item }}"
            dest: "/etc/fonts/conf.d/{{ item }}"
            owner: root
            group: root
            mode: 0644
          loop: "{{ fontconfig_symlinks }}"
          notify: run fc-cache
          when: fontconfig_symlinks is defined
      tags:
        - fonts

    - name: gnome shell
      block:
        - name: setup font and theme and perform few other tweaks on gnome shell
          become: yes
          become_user: "{{ user }}"
          dconf:
            key: "{{ item.key }}"
            value: "{{ item.value }}"
            state: present
          loop: "{{ gnome_dconf_settings }}"
          when: gnome_dconf_settings is defined

        - name: remove desktop icons
          file:
            path: "/usr/share/applications/{{ item }}"
            state: absent
          loop: "{{ absent_desktop_icons }}"
          when: absent_desktop_icons is defined
      tags:
        - gnome

    - name: setup custom user desktop icons
      template:
        src: "{{ item }}.j2"
        dest: "/home/{{ user }}/.local/share/applications/{{ item }}"
      loop: "{{ custom_user_icons }}"
      when: custom_user_icons is defined
      become: yes
      become_user: "{{ user }}"
      tags:
        - gnome

    - name: set sysctl values
      sysctl:
        key: "{{ item.key }}"
        value: "{{ item.value }}"
      loop: "{{ sysctl_values }}"
      when: sysctl_values is defined
      tags:
        - sysctl

    - name: setup environment variables
      lineinfile:
        line: "{{ item }}"
        path: /etc/environment
      loop: "{{ environment_vars }}"
      when: environment_vars is defined
      tags:
        - environment

    - name: k8s
      block:
        - name: install minikube, kubectl and kind
          get_url:
            url: "{{ item.url }}"
            dest: "{{ item.dest }}"
            owner: root
            group: root
            mode: 0755
          loop:
            - { url: "https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64", dest: /usr/local/bin/minikube }
            - { url: "https://dl.k8s.io/release/v{{ k8s.kubectl.version }}/bin/linux/amd64/kubectl", dest: /usr/local/bin/kubectl }
            - { url: "https://kind.sigs.k8s.io/dl/v{{ k8s.kind.version }}/kind-linux-amd64", dest: /usr/local/bin/kind }

        - name: download helm
          unarchive:
            src: "https://get.helm.sh/helm-v{{ k8s.helm.version }}-linux-amd64.tar.gz"
            dest: /tmp
            remote_src: yes

        - name: copy helm binary into place
          copy:
            src: /tmp/linux-amd64/helm
            dest: /usr/local/bin/helm
            owner: root
            group: root
            mode: 0755

        - name: cleanup /tmp from helm
          file:
            path: /tmp/linux-amd64
            state: absent
      tags:
        - k8s

    - name: docker
      block:
        - name: setup docker repository
          command: dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
          args:
            creates: /etc/yum.repos.d/docker-ce.repo

        - name: install docker packages
          dnf:
            name: ["docker-ce", "docker-ce-cli", "containerd.io"]
            state: present
            update_cache: yes

        - name: prepare cli-plugins directory
          file:
            path: /usr/local/lib/docker/cli-plugins
            state: directory
            recurse: yes
            owner: root
            group: root
            mode: 0755

        - name: setup docker compose v2
          get_url:
            url: "https://github.com/docker/compose/releases/download/v{{ docker.compose.version }}/docker-compose-linux-x86_64"
            dest: /usr/local/lib/docker/cli-plugins/docker-compose
            owner: root
            group: root
            mode: 0755

        - name: add user to docker group
          user:
            name: "{{ user }}"
            groups: docker
            append: yes
      tags:
        - docker

    - name: system services
      block:
        - name: ensure critical system services are running
          systemd:
            name: "{{ item }}"
            state: started
            enabled: yes
          loop: "{{ critical_system_services }}"
          when: critical_system_services is defined

        - name: mask unwanted system services
          systemd:
            name: "{{ item }}"
            state: stopped
            masked: yes
          loop: "{{ masked_system_services }}"
          when: masked_system_services is defined
      tags:
        - services

    - name: user services
      block:
        - name: ensure critical user services are running
          systemd:
            name: "{{ item }}"
            scope: user
            enabled: yes
            state: started
          loop: "{{ critical_user_services }}"
          when: critical_user_services is defined

        - name: mask unwanted user services
          systemd:
            name: "{{ item }}"
            scope: user
            masked: yes
            state: stopped
          loop: "{{ masked_user_services }}"
          when: masked_user_services is defined
      become: yes
      become_user: "{{ user }}"
      tags:
        - user_services

    - name: vim
      block:
        - name: prepare vim plug directories
          file:
            path: "{{ item }}"
            state: directory
            recurse: yes
          loop:
            - /home/{{ user }}/.vim/autoload
            - /home/{{ user }}/.vim/plugged

        - name: install vim-plug
          get_url:
            url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
            dest: "{{ item  }}"
            owner: "{{ user }}"
            group: "{{ user }}"
          when: not ansible_check_mode
          loop:
            - /home/{{ user }}/.vim/autoload/plug.vim

        - name: put plugins into plugged directory
          git:
            repo: "{{ item }}"
            dest: "/home/{{ user }}/.vim/plugged/{{ item.split('/')[4] }}"
            update: yes
            force: yes
            depth: 1
          when: vim_plugins is defined and not ansible_check_mode
          loop: "{{ vim_plugins }}"

        - name: setup vimrc
          template:
            src: vimrc.j2
            dest: "/home/{{ user }}/.vimrc"
            owner: "{{ user }}"
            group: "{{ user }}"
            mode: 0644
      become: yes
      become_user: "{{ user }}"
      tags:
        - vim

    - name: provision dotfiles
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: 0644
      loop:
        - { src: "gitconfig.j2", dest: "/home/{{ user }}/.gitconfig", owner: "{{ user }}", group: "{{ user }}" }
        - { src: "zshrc.j2", dest: "/home/{{ user }}/.zshrc", owner: "{{ user }}", group: "{{ user }}" }
      tags:
        - dotfiles

  handlers:
    - name: run fc-cache
      command: fc-cache -r

    - name: daemon-reload
      systemd:
        daemon-reload: yes

    - name: restart nm
      systemd:
        name: NetworkManager
        state: restarted
