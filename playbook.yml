---
- hosts: localhost
  vars_files:
    - vars.yml
  tasks:
    - name: install required packages
      dnf:
        name: "{{ packages }}"
        state: present
      when: packages is defined
      tags:
        - packages

    - name: remove packages
      dnf:
        name: "{{ absent_packages }}"
        state: absent
      when: absent_packages is defined
      tags:
        - packages

    - name: setup time
      file:
        state: link
        force: yes
        src: "/usr/share/zoneinfo/{{ timezone }}"
        dest: /etc/localtime
        owner: root
        group: root
        mode: 0644
      tags:
        - locale

    - name: setup locale.conf
      template:
        src: locale.conf.j2
        dest: /etc/locale.conf
        owner: root
        group: root
        mode: 0644
      tags:
        - locale

    - name: setup hostname
      hostname:
        name: "{{ hostname }}"
        use: systemd
      notify: restart nm
      tags:
        - network

    - name: create /etc/systemd/system-preset directory
      file:
        path: /etc/systemd/system-preset
        state: directory
        owner: root
        group: root
        mode: 0755
      tags:
        - services

    - name: opt out of systemd-resolved use
      copy:
        dest: /etc/systemd/system-preset/20-systemd-resolved-disable.preset
        content: "disable systemd-resolved.service"
        owner: root
        group: root
        mode: 0644
      notify: daemon-reload
      tags:
        - services

    - name: setup NetworkManager
      template:
        src: NetworkManager.conf.j2
        dest: /etc/NetworkManager/NetworkManager.conf
        owner: root
        group: root
        mode: 0644
      notify: restart nm
      tags:
        - network

    - name: setup /etc/hosts
      template:
        src: hosts.j2
        dest: /etc/hosts
        owner: root
        group: root
        mode: 0644
      notify: restart nm
      tags:
        - network

    - name: setup resolv.conf
      template:
        src: resolv.conf.j2
        dest: /etc/resolv.conf
        owner: root
        group: root
        mode: 0644
      notify: restart nm
      tags:
        - network

    - name: setup iptables rules
      template:
        src: iptables-rules.j2
        dest: /usr/local/sbin/iptables-rules
        owner: root
        group: root
        mode: 0700
      notify: restart iptables
      tags:
        - network
        - firewall

    - name: setup iptables service
      template:
        src: iptables.service.j2
        dest: /etc/systemd/system/iptables.service
        owner: root
        group: root
        mode: 0644
      notify:
        - daemon-reload
        - restart iptables
      tags:
        - network
        - firewall

    - name: setup fontconfig
      template:
        src: fontconfig.j2
        dest: /etc/fonts/local.conf
        owner: root
        group: root
        mode: 0644
      notify:
        - run fc-cache
      tags:
        - fonts

    - name: setup fontconfig symlinks
      file:
        state: link
        force: yes
        src: "/usr/share/fontconfig/conf.avail/{{ item }}"
        dest: "/etc/fonts/conf.d/{{ item }}"
        owner: root
        group: root
        mode: 0644
      loop: "{{ fontconfig_symlinks }}"
      notify:
        - run fc-cache
      when: fontconfig_symlinks is defined
      tags:
        - fonts

    - name: setup font and theme and perform few other tweaks on gnome shell
      become: yes
      become_user: "{{ user }}"
      dconf:
        key: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
      loop: "{{ gnome_dconf_settings }}"
      when: gnome_dconf_settings is defined
      tags:
        - gnome
        - fonts

    - name: remove desktop icons
      file:
        path: "/usr/share/applications/{{ item }}"
        state: absent
      loop: "{{ absent_desktop_icons }}"
      when: absent_desktop_icons is defined
      tags:
        - gnome

    - name: ensure critical system services are running
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop: "{{ critical_system_services }}"
      when: critical_system_services is defined
      tags:
        - services

    - name: mask unwanted system services
      systemd:
        name: "{{ item }}"
        state: stopped
        masked: yes
      loop: "{{ masked_system_services }}"
      when: masked_system_services is defined
      tags:
        - services

    - name: ensure critical user services are running
      become: yes
      become_user: "{{ user }}"
      systemd:
        name: "{{ item }}"
        scope: user
        enabled: yes
        state: started
      loop: "{{ critical_user_services }}"
      when: critical_user_services is defined
      tags:
        - user_services

    - name: mask unwanted user services
      become: yes
      become_user: "{{ user }}"
      systemd:
        name: "{{ item }}"
        scope: user
        masked: yes
        state: stopped
      loop: "{{ masked_user_services }}"
      when: masked_user_services is defined
      tags:
        - user_services

    - name: setup environment variables
      lineinfile:
        line: "{{ item }}"
        path: /etc/environment
      loop: "{{ environment_vars }}"
      when: environment_vars is defined
      tags:
        - environment

    - name: set sysctl values
      sysctl:
        key: "{{ item.key }}"
        value: "{{ item.value }}"
      loop: "{{ sysctl_values }}"
      when: sysctl_values is defined
      tags:
        - sysctl

    - name: prepare vim plug directories
      become: yes
      become_user: "{{ user }}"
      file:
        path: "{{ item }}"
        state: directory
        recurse: yes
      loop:
        - /home/{{ user }}/.vim/autoload
        - /home/{{ user }}/.vim/plugged
      tags:
        - vim

    - name: install vim-plug
      become: yes
      become_user: "{{ user }}"
      get_url:
        url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        dest: "{{ item  }}"
        owner: "{{ user }}"
        group: "{{ user }}"
      when: not ansible_check_mode
      loop:
        - /home/{{ user }}/.vim/autoload/plug.vim
      tags:
        - vim

    - name: put plugins into plugged directory
      become: yes
      become_user: "{{ user }}"
      git:
        repo: "{{ item }}"
        dest: "/home/{{ user }}/.vim/plugged/{{ item.split('/')[4] }}"
        update: yes
        force: yes
        depth: 1
      when: vim_plugins is defined and not ansible_check_mode
      loop: "{{ vim_plugins }}"
      tags:
        - vim

    - name: provision dotfiles
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: 0644
      loop:
        - { src: "vimrc.j2", dest: "/home/{{ user }}/.vimrc", owner: "{{ user }}", group: "{{ user }}" }
        - { src: "gitconfig.j2", dest: "/home/{{ user }}/.gitconfig", owner: "{{ user }}", group: "{{ user }}" }
        - { src: "bashrc.j2", dest: "/home/{{ user }}/.bashrc", owner: "{{ user }}", group: "{{ user }}" }
        - { src: "bash_profile.j2", dest: "/home/{{ user }}/.bash_profile", owner: "{{ user }}", group: "{{ user }}" }
      tags:
        - vim
        - dotfiles
        - git

  handlers:
    - name: run fc-cache
      command: fc-cache -r

    - name: daemon-reload
      systemd:
        daemon-reload: yes

    - name: restart nm
      systemd:
        name: NetworkManager
        state: restarted

    - name: restart iptables
      systemd:
        name: iptables
        state: restarted
